name: Release

on:
  push:
    branches:
      - main

permissions:
  contents: write
  issues: write
  pull-requests: write

jobs:
  check:
    name: Check if release is needed
    runs-on: ubuntu-latest
    outputs:
      new-release-published: ${{ steps.semantic.outputs.new-release-published }}
      new-release-version: ${{ steps.semantic.outputs.new-release-version }}
    steps:
      - name: Checkout
        uses: actions/checkout@v5
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v6
        with:
          node-version: 'lts/*'

      - name: Install semantic-release and plugins
        run: |
          npm install \
            semantic-release \
            @semantic-release/changelog \
            @semantic-release/exec \
            @semantic-release/git

      - name: Check if release needed
        id: semantic
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          npx semantic-release --dry-run > release-output.txt 2>&1 || true
          if grep -q "Published release" release-output.txt || grep -q "There are no relevant changes" release-output.txt; then
            if grep -q "Published release" release-output.txt; then
              echo "new-release-published=true" >> $GITHUB_OUTPUT
              version=$(grep -oP "Published release \K[0-9]+\.[0-9]+\.[0-9]+" release-output.txt || echo "")
              echo "new-release-version=$version" >> $GITHUB_OUTPUT
              echo "✅ Release will be published: $version"
            else
              echo "new-release-published=false" >> $GITHUB_OUTPUT
              echo "⏭️ No relevant changes, skipping release"
            fi
          fi

  build:
    name: Build ${{ matrix.platform }}
    needs: check
    if: needs.check.outputs.new-release-published == 'true'
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            platform: linux
            target: x86_64-unknown-linux-gnu
            binary_name: git-semantic
            asset_name: git-semantic-linux-x86_64
          - os: macos-13
            platform: macos
            target: x86_64-apple-darwin
            binary_name: git-semantic
            asset_name: git-semantic-macos-x86_64
          - os: macos-latest
            platform: macos-arm
            target: aarch64-apple-darwin
            binary_name: git-semantic
            asset_name: git-semantic-macos-arm64
          - os: windows-latest
            platform: windows
            target: x86_64-pc-windows-msvc
            binary_name: git-semantic.exe
            asset_name: git-semantic-windows-x86_64.exe
    steps:
      - name: Checkout
        uses: actions/checkout@v5

      - name: Setup Rust
        uses: actions-rust-lang/setup-rust-toolchain@v1

      - name: Build
        run: cargo build --release

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.asset_name }}
          path: target/release/${{ matrix.binary_name }}

  release:
    name: Release
    needs: [check, build]
    if: needs.check.outputs.new-release-published == 'true'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v5
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v6
        with:
          node-version: 'lts/*'

      - name: Download all artifacts
        uses: actions/download-artifact@v5
        with:
          path: ./artifacts

      - name: Prepare binaries for release
        run: |
          mkdir -p binaries
          cp artifacts/git-semantic-linux-x86_64/git-semantic binaries/git-semantic-linux-x86_64
          cp artifacts/git-semantic-macos-x86_64/git-semantic binaries/git-semantic-macos-x86_64
          cp artifacts/git-semantic-macos-arm64/git-semantic binaries/git-semantic-macos-arm64
          cp artifacts/git-semantic-windows-x86_64.exe/git-semantic.exe binaries/git-semantic-windows-x86_64.exe
          ls -lah binaries/

      - name: Install semantic-release and plugins
        run: |
          npm install \
            semantic-release \
            @semantic-release/changelog \
            @semantic-release/exec \
            @semantic-release/git

      - name: Release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: npx semantic-release
